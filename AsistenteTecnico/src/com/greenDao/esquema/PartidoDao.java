package com.greenDao.esquema;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.greenDao.esquema.Partido;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PARTIDO.
*/
public class PartidoDao extends AbstractDao<Partido, Long> {

    public static final String TABLENAME = "PARTIDO";

    /**
     * Properties of entity Partido.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Oponente = new Property(1, int.class, "Oponente", false, "OPONENTE");
        public final static Property Fecha = new Property(2, java.util.Date.class, "Fecha", false, "FECHA");
        public final static Property Hora = new Property(3, String.class, "Hora", false, "HORA");
        public final static Property GolesOponente = new Property(4, int.class, "GolesOponente", false, "GOLES_OPONENTE");
        public final static Property GolesLocal = new Property(5, int.class, "GolesLocal", false, "GOLES_LOCAL");
        public final static Property Notas = new Property(6, String.class, "Notas", false, "NOTAS");
        public final static Property Lugar = new Property(7, String.class, "Lugar", false, "LUGAR");
        public final static Property Local = new Property(8, Long.class, "Local", false, "LOCAL");
    };

    private DaoSession daoSession;

    private Query<Partido> equipo_PartidosQuery;

    public PartidoDao(DaoConfig config) {
        super(config);
    }
    
    public PartidoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PARTIDO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OPONENTE' INTEGER NOT NULL ," + // 1: Oponente
                "'FECHA' INTEGER NOT NULL ," + // 2: Fecha
                "'HORA' TEXT NOT NULL ," + // 3: Hora
                "'GOLES_OPONENTE' INTEGER NOT NULL ," + // 4: GolesOponente
                "'GOLES_LOCAL' INTEGER NOT NULL ," + // 5: GolesLocal
                "'NOTAS' TEXT NOT NULL ," + // 6: Notas
                "'LUGAR' TEXT NOT NULL ," + // 7: Lugar
                "'LOCAL' INTEGER);"); // 8: Local
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PARTIDO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Partido entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOponente());
        stmt.bindLong(3, entity.getFecha().getTime());
        stmt.bindString(4, entity.getHora());
        stmt.bindLong(5, entity.getGolesOponente());
        stmt.bindLong(6, entity.getGolesLocal());
        stmt.bindString(7, entity.getNotas());
        stmt.bindString(8, entity.getLugar());
 
        Long Local = entity.getLocal();
        if (Local != null) {
            stmt.bindLong(9, Local);
        }
    }

    @Override
    protected void attachEntity(Partido entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Partido readEntity(Cursor cursor, int offset) {
        Partido entity = new Partido( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // Oponente
            new java.util.Date(cursor.getLong(offset + 2)), // Fecha
            cursor.getString(offset + 3), // Hora
            cursor.getInt(offset + 4), // GolesOponente
            cursor.getInt(offset + 5), // GolesLocal
            cursor.getString(offset + 6), // Notas
            cursor.getString(offset + 7), // Lugar
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // Local
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Partido entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOponente(cursor.getInt(offset + 1));
        entity.setFecha(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setHora(cursor.getString(offset + 3));
        entity.setGolesOponente(cursor.getInt(offset + 4));
        entity.setGolesLocal(cursor.getInt(offset + 5));
        entity.setNotas(cursor.getString(offset + 6));
        entity.setLugar(cursor.getString(offset + 7));
        entity.setLocal(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Partido entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Partido entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Partidos" to-many relationship of Equipo. */
    public List<Partido> _queryEquipo_Partidos(Long Local) {
        synchronized (this) {
            if (equipo_PartidosQuery == null) {
                QueryBuilder<Partido> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Local.eq(null));
                equipo_PartidosQuery = queryBuilder.build();
            }
        }
        Query<Partido> query = equipo_PartidosQuery.forCurrentThread();
        query.setParameter(0, Local);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEquipoDao().getAllColumns());
            builder.append(" FROM PARTIDO T");
            builder.append(" LEFT JOIN EQUIPO T0 ON T.'LOCAL'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Partido loadCurrentDeep(Cursor cursor, boolean lock) {
        Partido entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Equipo equipo = loadCurrentOther(daoSession.getEquipoDao(), cursor, offset);
        entity.setEquipo(equipo);

        return entity;    
    }

    public Partido loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Partido> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Partido> list = new ArrayList<Partido>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Partido> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Partido> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package com.greenDao.esquema;

import com.greenDao.esquema.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PARTIDO.
 */
public class Partido {

    private Long id;
    private int Oponente;
    /** Not-null value. */
    private java.util.Date Fecha;
    /** Not-null value. */
    private String Hora;
    private int GolesOponente;
    private int GolesLocal;
    /** Not-null value. */
    private String Notas;
    /** Not-null value. */
    private String Lugar;
    private Long Local;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PartidoDao myDao;

    private Equipo equipo;
    private Long equipo__resolvedKey;


    public Partido() {
    }

    public Partido(Long id) {
        this.id = id;
    }

    public Partido(Long id, int Oponente, java.util.Date Fecha, String Hora, int GolesOponente, int GolesLocal, String Notas, String Lugar, Long Local) {
        this.id = id;
        this.Oponente = Oponente;
        this.Fecha = Fecha;
        this.Hora = Hora;
        this.GolesOponente = GolesOponente;
        this.GolesLocal = GolesLocal;
        this.Notas = Notas;
        this.Lugar = Lugar;
        this.Local = Local;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPartidoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getOponente() {
        return Oponente;
    }

    public void setOponente(int Oponente) {
        this.Oponente = Oponente;
    }

    /** Not-null value. */
    public java.util.Date getFecha() {
        return Fecha;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFecha(java.util.Date Fecha) {
        this.Fecha = Fecha;
    }

    /** Not-null value. */
    public String getHora() {
        return Hora;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHora(String Hora) {
        this.Hora = Hora;
    }

    public int getGolesOponente() {
        return GolesOponente;
    }

    public void setGolesOponente(int GolesOponente) {
        this.GolesOponente = GolesOponente;
    }

    public int getGolesLocal() {
        return GolesLocal;
    }

    public void setGolesLocal(int GolesLocal) {
        this.GolesLocal = GolesLocal;
    }

    /** Not-null value. */
    public String getNotas() {
        return Notas;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNotas(String Notas) {
        this.Notas = Notas;
    }

    /** Not-null value. */
    public String getLugar() {
        return Lugar;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLugar(String Lugar) {
        this.Lugar = Lugar;
    }

    public Long getLocal() {
        return Local;
    }

    public void setLocal(Long Local) {
        this.Local = Local;
    }

    /** To-one relationship, resolved on first access. */
    public Equipo getEquipo() {
        Long __key = this.Local;
        if (equipo__resolvedKey == null || !equipo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EquipoDao targetDao = daoSession.getEquipoDao();
            Equipo equipoNew = targetDao.load(__key);
            synchronized (this) {
                equipo = equipoNew;
            	equipo__resolvedKey = __key;
            }
        }
        return equipo;
    }

    public void setEquipo(Equipo equipo) {
        synchronized (this) {
            this.equipo = equipo;
            Local = equipo == null ? null : equipo.getId();
            equipo__resolvedKey = Local;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
